package com.MyTankGame1;

import java.io.FileWriter;
import java.util.Vector;
import java.io.*;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.SourceDataLine;
//Music File
class AePlayWave extends Thread{
	private String filename;
	public AePlayWave(String wavfile) {
		filename = wavfile;

	}

	public void run() {

		File soundFile = new File(filename);

		AudioInputStream audioInputStream = null;
		try {
			audioInputStream = AudioSystem.getAudioInputStream(soundFile);
		} catch (Exception e1) {
			e1.printStackTrace();
			return;
		}

		AudioFormat format = audioInputStream.getFormat();
		SourceDataLine auline = null;
		DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);

		try {
			auline = (SourceDataLine) AudioSystem.getLine(info);
			auline.open(format);
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}

		auline.start();
		int nBytesRead = 0;
		//Buffer
		byte[] abData = new byte[512];

		try {
			while (nBytesRead != -1) {
				nBytesRead = audioInputStream.read(abData, 0, abData.length);
				if (nBytesRead >= 0)
					auline.write(abData, 0, nBytesRead);
			}
		} catch (IOException e) {
			e.printStackTrace();
			return;
		} finally {
			auline.drain();
			auline.close();
		}

	}

	
}

class Node
{
	int x;
	int y;
	int direct;
	public Node(int x, int y, int direct)
	{
    this.x=x;
    this.y=y;
    this.direct=direct;
    

	}
}

class Recorder
{
	//Record of EnemyTank num(this level)
	private static int enNum=5;
	//Record of MyTank num
	private static int myLife=1;
	//Record of HittenEnemy
	private static int allEnNum = 0;
	//Restore the info from Recording file
	static Vector<Node> nodes=new Vector<Node>();
	private static FileWriter fw = null;
	private static BufferedWriter bw=null;
	private static FileReader fr=null;
	private static BufferedReader br=null;
	private  Vector<EnemyTank> ets=new Vector<EnemyTank>();
	
	
	//Save info(HittenEnemy num, EnemyTank Location, Direction)
		public void keepRecAndEnemyTank()
		{
			try {
				fw=new FileWriter("c:\\TankGame\\myrecording.txt"); //Create and save records in file(Optional Location)
				bw=new BufferedWriter(fw);
				
				bw.write(allEnNum+"\r\n");
				
				//Save Record of EnemyTank Location
				for(int i=0;i<ets.size();i++)
				{
					//Get ET
					EnemyTank et=ets.get(i);
					
					if(et.isLive){
						String recode=et.x+" "+et.y+" "+et.direct;
						//Write in
						bw.write(recode+"\r\n");
						 
					}
				}
				
				
			} catch (Exception e) {
				// TODO: handle exception
			}finally{
				try {
					//Close FileStream(Important)
					bw.close();
					fw.close();
					
				} catch (Exception e2) {
					// TODO: handle exception
				}
			}
		}
		
		//Read Records
		public static void getRecording()
		{
			try {
				fr=new FileReader("c:\\TankGame\\myrecording.txt"); //
				br=new BufferedReader(fr);
				String n=br.readLine();
				allEnNum=Integer.parseInt(n);
			} catch (Exception e) {
				// TODO: handle exception
			}finally{
				//Close FileStream
				try {
					br.close();
					fr.close();
					
				} catch (Exception e) {
					e.printStackTrace();
					// TODO: handle exception
				}
			}
		}
		
		//Save records of HittenEnemy
		public static void KeepRecording()
		{
			try {
				
				fw=new FileWriter("c:\\TankGame\\myrecording.txt");
				bw=new BufferedWriter(fw);
				
				bw.write(allEnNum+"\r\n");
				
			} catch (Exception e) {
				e.printStackTrace();
				// TODO: handle exception
			}finally{
			
			//Close FileStream
				try {
				
					bw.close();
					fw.close();
				} catch (Exception e) {
					e.printStackTrace();
					// TODO: handle exception
				}
			}
		}
	public static int getEnNum() {
		return enNum;
	}
	public static void setEnNum(int enNum) {
		Recorder.enNum = enNum;
	}
	public static int getMyLife() {
		return myLife;
	}
	public static void setMyLife(int myLife) {
		Recorder.myLife = myLife;
	}

	public Vector<EnemyTank> getEts() {
		return ets;
	}
	public  void setEts(Vector<EnemyTank> ets1) {
		this.ets = ets1;
	}
	
	public static int getAllEnNum() {
		return allEnNum;
	}
	public static void setAllEnNum(int allEnNum) {
		Recorder.allEnNum = allEnNum;
	}
	//Get EnemyTank num  records decreased
	public static void reduceEnNum()
	{
		enNum--;
	}
	//Increase HittenEnemy num
	public static void addEnNumRec()
	{
		allEnNum++;
	}
	//FileStream Reader
		public Vector<Node> getNodesAndEnNums()
		{
			try {
				fr=new FileReader("c:\\TankGame\\myrecording.txt");
				br=new BufferedReader(fr);
				String n = "";
				//Read HittenEnemy records first
				n=br.readLine();
				allEnNum=Integer.parseInt(n);
			//Read rest of Info
				while((n=br.readLine())!=null)
				{
					String []xyz=n.split(" ");
					
					Node node=new Node(Integer.parseInt(xyz[0]),Integer.parseInt(xyz[1]),Integer.parseInt(xyz[2]));
						nodes.add(node);
						
					}
					
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}finally{
				try {
					br.close();
					fr.close();
					
				} catch (Exception e) {
					e.printStackTrace();
					// TODO: handle exception
				}
			}
			return nodes;
		}
		
}

class Bomb
{
	//Define coordinate of Bombs
	int x,y;
	//Define Bombs life(Displayed as gradually)
	int life=9;
	boolean isLive=true;
	public Bomb(int x,int y)
	{
		this.x=x;
		this.y=y;
		
	}
	public void lifeDown()
	{
		if(life>0)
		{
			life--;
		}
		else{
			this.isLive=false;
		}
	}
}


class Shot implements Runnable
{
	int x;
	int y;
	int direct;
	int speed=3;
	//Judge Shot is alive or not
	boolean isLive=true;
	public Shot(int x,int y,int direct)
	{
		this.x=x;
		this.y=y;
		this.direct=direct;
		
	}
	@Override
	public void run() {
		// TODO Auto-generated method stub
		while(true)
		{
			try {
				Thread.sleep(50);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			switch(direct)
			{
			case 0:
				//up
				y-=speed;
				break;
				
			case 1:
				x+=speed;
				break;
				
			case 2:
				y+=speed;
				break;
				
			case 3:
				x-=speed;
				break;
				
			}
			
			//Shot hit edge, dead
			if(x<0||x>430||y<0||y>330)
			{
				this.isLive=false;
				break;
			}
		}
	}
}


class Tank
{
	//Define coordinate of Tank
	int x=0;
	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	int y=0;
	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	//0 up, 1 right, 2 down, 3 left
	int direct=0;
	//Set Tank's speed
	int speed=2;
	int color;
	boolean isLive=true;
	public	Tank(int x,int y)
	{
		this.x=x;
		this.y=y;
		
	}
public int getColor() {
		return color;
	}

	public void setColor(int color) {
		this.color = color;
	}

public int getSpeed() {
		return speed;
	}

	public void setSpeed(int speed) {
		this.speed = speed;
	}

public int getDirect() {
		return direct;
	}

	public void setDirect(int direct) {
		this.direct = direct;
	}


}

class EnemyTank extends Tank implements Runnable
{

    int times=0;
Vector<EnemyTank> ets=new Vector<EnemyTank>();

	//Set a Vector, get EnemyShot
	Vector<Shot> ss =new Vector<Shot>();
	//Set Shot to ET(Create a new ET or ET's shot dead)
	
	public EnemyTank(int x, int y) {
		super(x, y);
		// TODO Auto-generated constructor stub
	}
	//Get ET Vector from MyPanel
	public void setEts(Vector<EnemyTank> vv)
	{
		this.ets=vv;
	}
    //Judge if hit each other
	public boolean isTouchOtherEnemy()
	{
		boolean b=false;
		switch(this.direct)
		{
		case 0:
			//ET UP
			//Get each ET
			
			for(int i=0;i<ets.size();i++)
			{
				EnemyTank et=ets.get(i);
				//If not itself
				if(et!=this)
				{
					if(et.direct==0||et.direct==2)
					{
						if(this.x>=et.x&&this.x<=(et.x+20)&&this.y>=et.y&&this.y<=(et.y+30))
						{
							return true;
						}
						if(this.x+20>=et.x&&this.x+20<=et.x+20&&this.y>=et.y&&this.y<=et.y+30)
						{
							return true;
						}
					}
					if(et.direct==3||et.direct==1)
					{
						if(this.x>=et.x&&this.x<=(et.x+30)&&this.y>=et.y&&this.y<=(et.y+20))
						{
							return true;
						}
						if(this.x+20>=et.x&&this.x+20<=et.x+30&&this.y>=et.y&&this.y<=et.y+20)
						{
							return true;
						}
					}
				}
			}
			break;
		case 1:
			//ET Right
			for(int i=0;i<ets.size();i++)
			{
				EnemyTank et=ets.get(i);
			
				if(et!=this)
				{
					if(et.direct==0||et.direct==2)
					{
						if(this.x+30>=et.x&&this.x+30<=(et.x+20)&&this.y>=et.y&&this.y<=(et.y+30))
						{
							return true;
						}
						if(this.x+30>=et.x&&this.x+30<=et.x+20&&this.y>=et.y&&this.y<=et.y+30)
						{
							return true;
						}
					}
					if(et.direct==3||et.direct==1)
					{
						if(this.x+30>=et.x&&this.x+30<=(et.x+30)&&this.y+20>=et.y&&this.y+20<=(et.y+20))
						{
							return true;
						}
						if(this.x+30>=et.x&&this.x+30<=et.x+30&&this.y+20>=et.y&&this.y+20<=et.y+20)
						{
							return true;
						}
					}
				}
			}
			break;
		case 2:
			//ET Down
			
			for(int i=0;i<ets.size();i++)
			{
				EnemyTank et=ets.get(i);
			
				if(et!=this)
				{
					if(et.direct==0||et.direct==2)
					{
						if(this.x>=et.x&&this.x<=(et.x+20)&&this.y+30>=et.y&&this.y+30<=(et.y+30))
						{
							return true;
						}
						if(this.x>=et.x&&this.x<=et.x+20&&this.y+30>=et.y&&this.y+30<=et.y+30)
						{
							return true;
						}
					}
					if(et.direct==3||et.direct==1)
					{
						if(this.x+20>=et.x&&this.x+20<=(et.x+30)&&this.y+30>=et.y&&this.y+30<=(et.y+20))
						{
							return true;
						}
						if(this.x+20>=et.x&&this.x+20<=et.x+30&&this.y+30>=et.y&&this.y+30<=et.y+20)
						{
							return true;
						}
					}
				}
			}
			break;
		case 3:
			//ET LEFT
			for(int i=0;i<ets.size();i++)
			{
				EnemyTank et=ets.get(i);
			
				if(et!=this)
				{
					if(et.direct==0||et.direct==2)
					{
						if(this.x>=et.x&&this.x<=(et.x+20)&&this.y>=et.y&&this.y<=(et.y+30))
						{
							return true;
						}
						if(this.x>=et.x&&this.x<=et.x+20&&this.y>=et.y&&this.y<=et.y+30)
						{
							return true;
						}
					}
					if(et.direct==3||et.direct==1)
					{
						if(this.x>=et.x&&this.x<=(et.x+30)&&this.y+20>=et.y&&this.y+20<=(et.y+20))
						{
							return true;
						}
						if(this.x>=et.x&&this.x<=et.x+30&&this.y+20>=et.y&&this.y+20<=et.y+20)
						{
							return true;
						}
					}
				}
			}
			break;
			
		}
		return b;

	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		
		while(true){
			switch(this.direct)
			{
			case 0:
				for(int i=0;i<30;i++)
				{
					if(y>0&&!this.isTouchOtherEnemy())
					{
					y-=speed;
					}
						try {
							Thread.sleep(50);
						} catch (Exception e) {
							// TODO: handle exception
						}
					}
					
				//Set ET go UP
			
				break;
					
			case 1:
				for(int i=0;i<30;i++)
			{
					if(x<400&&!this.isTouchOtherEnemy())
					{
				x+=speed;
					}
					try {
						Thread.sleep(50);
					} catch (Exception e) {
						// TODO: handle exception
					}
				}
				
				break;
			case 2:
				for(int i=0;i<30;i++)
				{
					if(y<300&&!this.isTouchOtherEnemy())
					{
					y+=speed;
					}
						try {
							Thread.sleep(50);
						} catch (Exception e) {
							// TODO: handle exception
						}
					}
					
		
				break;
			case 3:
				for(int i=0;i<30;i++)
				{
					if(x>0&&!this.isTouchOtherEnemy())
					{
					x-=speed;
					}
						try {
							Thread.sleep(50);
						} catch (Exception e) {
							// TODO: handle exception
						}
					}
					
			
				break;
			}
		this.times++;
		if(times%2==0)
		{
		
				if(isLive)
				{
					if(ss.size()<5)
					{
						Shot s =null;
					
						switch(direct)
						{
						case 0:
							s=new Shot(x+10,y,0);
							ss.add(s);
							break;
							case 1:
								s=new Shot(x+30,y+10,1);
								ss.add(s);
								break;
							case 2:
								s=new Shot(x+10,y+30,2);
								ss.add(s);
								break;
							case 3:
								s=new Shot(x,y+10,3);
								ss.add(s);
								break;
						}
					
						//Start Thread(Shot)
						Thread t=new Thread(s);
						t.start();
					}
				
				
				}
			}
		
			
			//Set a random direction for ET
			this.direct=(int)(Math.random()*4);
			//Judge ET alive or not
			if(this.isLive==false)
			{
				//If dead, exit Thread
				
				break;
			}
			
		}
	}
}

class Hero extends Tank
{

	//Set Vector for Shot
	Vector<Shot> ss=new Vector<Shot>();
	Shot s=null;
	
	public Hero(int x, int y) {
		super(x, y);
		// TODO Auto-generated constructor stub
	}
    //Fire from MyTank
	public void shotEnemy()
	{
		
		switch(this.direct){
		case 0:
			s=new Shot(x+10, y,0);
			ss.add(s);
			break;
		case 1:
			s=new Shot(x+30, y+10,1);
			ss.add(s);
			break;
		case 2:
			s=new Shot(x+10, y+30,2);
			ss.add(s);
			break;
		case 3:
			s=new Shot(x, y+10,3);
			ss.add(s);
			break;
			
		}
		Thread t=new Thread(s);
		t.start();
	}

	//MT up
	public void moveUp()
	{
		y-=speed;
		
	}
	//MT right
	public void moveRight()
	{
		x+=speed;
		
	}
	//MT down
	public void moveDown()
	{
		y+=speed;
		
	}
	//MT left
	public void moveLeft()
	{
		x-=speed;
		
	}
}

